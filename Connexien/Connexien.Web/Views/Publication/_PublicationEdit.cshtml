@using Connexien.Web.Models
@using System.Text.RegularExpressions
@model PublicationModel
@{
    var staticClass = "";

    Model.ServiceTags = Model.ServiceTags ?? new long[0];
    Model.ProductTags = Model.ProductTags ?? "";
    Model.SectorTags = Model.SectorTags ?? new string[0];

    var sTypes = OptionModel.GetSectorTypes();
    //var pTypes = OptionModel.GetProductTypes();

    bool isMobile = false;

    string u = Request.ServerVariables["HTTP_USER_AGENT"];
    Regex browser = new Regex(@"(android|bb\d+|meego).+mobile|avantgo|bada\/|blackberry|blazer|compal|elaine|fennec|hiptop|iemobile|ip(hone|od)|iris|kindle|lge |maemo|midp|mmp|mobile.+firefox|netfront|opera m(ob|in)i|palm( os)?|phone|p(ixi|re)\/|plucker|pocket|psp|series(4|6)0|symbian|treo|up\.(browser|link)|vodafone|wap|windows ce|xda|xiino", RegexOptions.IgnoreCase | RegexOptions.Multiline);
    Regex viewport = new Regex(@"1207|6310|6590|3gso|4thp|50[1-6]i|770s|802s|a wa|abac|ac(er|oo|s\-)|ai(ko|rn)|al(av|ca|co)|amoi|an(ex|ny|yw)|aptu|ar(ch|go)|as(te|us)|attw|au(di|\-m|r |s )|avan|be(ck|ll|nq)|bi(lb|rd)|bl(ac|az)|br(e|v)w|bumb|bw\-(n|u)|c55\/|capi|ccwa|cdm\-|cell|chtm|cldc|cmd\-|co(mp|nd)|craw|da(it|ll|ng)|dbte|dc\-s|devi|dica|dmob|do(c|p)o|ds(12|\-d)|el(49|ai)|em(l2|ul)|er(ic|k0)|esl8|ez([4-7]0|os|wa|ze)|fetc|fly(\-|_)|g1 u|g560|gene|gf\-5|g\-mo|go(\.w|od)|gr(ad|un)|haie|hcit|hd\-(m|p|t)|hei\-|hi(pt|ta)|hp( i|ip)|hs\-c|ht(c(\-| |_|a|g|p|s|t)|tp)|hu(aw|tc)|i\-(20|go|ma)|i230|iac( |\-|\/)|ibro|idea|ig01|ikom|im1k|inno|ipaq|iris|ja(t|v)a|jbro|jemu|jigs|kddi|keji|kgt( |\/)|klon|kpt |kwc\-|kyo(c|k)|le(no|xi)|lg( g|\/(k|l|u)|50|54|\-[a-w])|libw|lynx|m1\-w|m3ga|m50\/|ma(te|ui|xo)|mc(01|21|ca)|m\-cr|me(rc|ri)|mi(o8|oa|ts)|mmef|mo(01|02|bi|de|do|t(\-| |o|v)|zz)|mt(50|p1|v )|mwbp|mywa|n10[0-2]|n20[2-3]|n30(0|2)|n50(0|2|5)|n7(0(0|1)|10)|ne((c|m)\-|on|tf|wf|wg|wt)|nok(6|i)|nzph|o2im|op(ti|wv)|oran|owg1|p800|pan(a|d|t)|pdxg|pg(13|\-([1-8]|c))|phil|pire|pl(ay|uc)|pn\-2|po(ck|rt|se)|prox|psio|pt\-g|qa\-a|qc(07|12|21|32|60|\-[2-7]|i\-)|qtek|r380|r600|raks|rim9|ro(ve|zo)|s55\/|sa(ge|ma|mm|ms|ny|va)|sc(01|h\-|oo|p\-)|sdk\/|se(c(\-|0|1)|47|mc|nd|ri)|sgh\-|shar|sie(\-|m)|sk\-0|sl(45|id)|sm(al|ar|b3|it|t5)|so(ft|ny)|sp(01|h\-|v\-|v )|sy(01|mb)|t2(18|50)|t6(00|10|18)|ta(gt|lk)|tcl\-|tdg\-|tel(i|m)|tim\-|t\-mo|to(pl|sh)|ts(70|m\-|m3|m5)|tx\-9|up(\.b|g1|si)|utst|v400|v750|veri|vi(rg|te)|vk(40|5[0-3]|\-v)|vm40|voda|vulc|vx(52|53|60|61|70|80|81|83|85|98)|w3c(\-| )|webc|whit|wi(g |nc|nw)|wmlb|wonu|x700|yas\-|your|zeto|zte\-", RegexOptions.IgnoreCase | RegexOptions.Multiline);
    if ((browser.IsMatch(u) || viewport.IsMatch(u.Substring(0, 4))))
    {
        isMobile = true;
    }
}

<div id="publication-modal-form">
    <div class="modal-header">
        <button type="button" class="close" data-dismiss="modal" aria-label="Close"><span aria-hidden="true">&times;</span></button>
        <h4 class="modal-title" id="articleModalLabel"><span class="glyphicon glyphicon-inbox"></span> &nbsp;Update Publication</h4>
    </div>
    @using (Html.BeginForm("Submit", "Publish", FormMethod.Post, new { id = "formPublish", role = "form", enctype = "multipart/form-data" }))
    {
        <div class="modal-body">

            <input id="Id" name="Id" type="hidden" value=@Model.Id>
            @Html.HiddenFor(x => x.ArticleGuid, new { @class = "static" })
            @Html.HiddenFor(x => x.ProfileId, new { @class = "static" })
            @Html.HiddenFor(x => x.ProfileGuid, new { @class = "static" })
            @Html.HiddenFor(x => x.StripeToken, new { @class = "static" })
            @Html.HiddenFor(x => x.StripeEmail, new { @class = "static" })

            <div class="modal-body form-horizontal">

                <div class="form-group">
                    @Html.LabelFor(x => x.Title, "Title", new { @class = "col-sm-3 control-label" })
                    <div class="col-sm-9">
                        @Html.TextBoxFor(x => x.Title, new { @class = "form-control " + staticClass, placeholder = "Publication Title" })
                        @Html.ValidationMessageFor(x => x.Title)
                    </div>
                </div>

                <div class="form-group">
                    @Html.LabelFor(x => x.Authors, "Authors", new { @class = "col-sm-3 control-label" })
                    <div class="col-sm-9">
                        @Html.TextBoxFor(x => x.Authors, new { @class = "form-control " + staticClass, placeholder = "Publication Authors" })
                        @Html.ValidationMessageFor(x => x.Authors)
                    </div>
                </div>
                <div class="form-group">
                    @Html.LabelFor(x => x.Description, "Description", new { @class = "col-sm-3 control-label" })
                    <div class="col-sm-9">
                        @Html.TextAreaFor(x => x.Description, new { @class = "form-control " + staticClass, placeholder = "Publication Description" })
                        @Html.ValidationMessageFor(x => x.Description)
                    </div>
                </div>
                <div class="form-group">
                    @Html.LabelFor(x => x.SectorTags, "Industry Sector", new { @class = "col-sm-3 control-label" })
                    <div class="col-sm-9">
                        <select id="SectorTags" name="SectorTags" class="selectpicker" multiple=""
                                data-selected-text-format="count" data-max-options="3" data-live-search="true"
                                title="Optional - Select some options or type to search" 
                                data-selected="@string.Join(",", Model.SectorTags)" 
                                @if (isMobile) { <text> data-mobile="true" </text> }>
                            @foreach (var s in sTypes)
                            {
                                <option value="@s.Value">@s.Text</option>
                            }
                        </select>
                    </div>
                </div>
                <div class="form-group">
                    @Html.LabelFor(x => x.ProductTags, "Tags", new { @class = "col-sm-3 control-label" })
                    <div class="col-sm-9">
                        @*<select id="ProductTags" name="ProductTags" class="selectpicker" multiple=""
                                data-selected-text-format="count" data-max-options="3" data-live-search="true"
                                title="Optional - Select some options or type to search"
                                data-selected="@string.Join(",", Model.ProductTags)" @if (isMobile) { <text> data-mobile="true" </text> }>
                            @foreach (var p in pTypes)
                            {
                                <optgroup label="@p.Key">
                                    @foreach (var v in p.Value)
                                    {
                                        <option value="@v.Value">@v.Text</option>
                                    }
                                </optgroup>
                            }
                        </select>*@
                        <input type="text" class="form-control" id="ProductTags" name="ProductTags" value="@Model.ProductTags"/>
                    </div>
                </div>

                <div class="form-group">
                    @Html.LabelFor(x => x.File, "Document", new { @class = "col-sm-3 control-label" })
                    <div class="col-sm-9">
                        <input type="file" id="File" name="File" title="No File Selected" accept=".docx, .doc, .pdf, .txt">
                        <span class="fileMsg text-muted">.doc .docx .pdf .txt</span>
                        <br><span class='text-danger'>Leave empty to keep existing file or select a new file to replace existing file.</span>
                        @Html.ValidationMessageFor(x => x.File)
                    </div>
                </div>
            </div>
        </div>
        <div class="modal-footer">
            <button type="button" class="btn btn-default pull-left" data-dismiss="modal">Close</button>
            <button id="saveChanges" type="button" class="btn btn-primary btn-submit" data-loading-text="Processing...">Save Changes</button>
        </div>
    }
</div>